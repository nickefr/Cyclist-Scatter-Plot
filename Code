<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cyclist Scatter Plot</title>
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: orange; /* Added background color */
    }
    #title {
      font-size: 20px;
      font-weight: bold;
      text-anchor: middle;
    }
    #tooltip {
      position: absolute;
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 5px;
      padding: 10px;
      display: none;
    }
    .dot {
      fill: steelblue;
      stroke: #fff;
    }
    .dot:hover {
      fill: darkblue;
    }
    #legend {
      font-size: 14px;
    }
    .legend-text {
      fill: #333;
    }
  </style>
</head>
<body>
  <div id="tooltip"></div>
  <svg id="chart"></svg>

  <script>
    const url = 'https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json';

    fetch(url)
      .then(response => response.json())
      .then(data => {
        const dataset = data.map(d => ({
          year: new Date(d.Year, 0), // Convert year to Date object
          time: new Date(d.Seconds * 1000) // Convert seconds to Date object
        }));

        const w = 800;
        const h = 400;
        const padding = 60;

        const svg = d3.select('#chart')
                      .attr('width', w)
                      .attr('height', h);

        const xScale = d3.scaleTime()
                         .domain([d3.min(dataset, d => d.year), d3.max(dataset, d => d.year)])
                         .range([padding, w - padding]);

        const yScale = d3.scaleTime()
                         .domain([d3.min(dataset, d => d.time), d3.max(dataset, d => d.time)])
                         .range([padding, h - padding]);

        const xAxis = d3.axisBottom(xScale).ticks(d3.timeYear.every(5));
        const yAxis = d3.axisLeft(yScale).tickFormat(d3.timeFormat('%M:%S'));

        svg.append('g')
           .attr('id', 'x-axis')
           .attr('transform', `translate(0, ${h - padding})`)
           .call(xAxis);

        svg.append('g')
           .attr('id', 'y-axis')
           .attr('transform', `translate(${padding}, 0)`)
           .call(yAxis);

        svg.selectAll('.dot')
           .data(dataset)
           .enter()
           .append('circle')
           .attr('class', 'dot')
           .attr('data-xvalue', d => d.year)
           .attr('data-yvalue', d => d.time)
           .attr('cx', d => xScale(d.year))
           .attr('cy', d => yScale(d.time))
           .attr('r', 5)
           .on('mouseover', function(d) {
             const tooltip = document.getElementById('tooltip');
             tooltip.style.display = 'block';
             tooltip.style.left = (d3.event.pageX + 10) + 'px';
             tooltip.style.top = (d3.event.pageY - 50) + 'px';
             tooltip.setAttribute('data-year', d.year);
             tooltip.innerHTML = `Year: ${d.year.getFullYear()}<br>Time: ${d.time.getMinutes()}:${d.time.getSeconds()}`;
           })
           .on('mouseout', function() {
             const tooltip = document.getElementById('tooltip');
             tooltip.style.display = 'none';
           });

        const legend = svg.append('g')
                         .attr('id', 'legend')
                         .attr('transform', `translate(${w - 100}, ${padding})`);

        legend.append('text')
              .attr('class', 'legend-text')
              .attr('x', 0)
              .attr('y', 0)
              .text('Riders with doping allegations');

        legend.append('circle')
              .attr('cx', 12)
              .attr('cy', -5)
              .attr('r', 5)
              .attr('fill', 'steelblue');

      });
  </script>
</body>
</html>
